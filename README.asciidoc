image::https://img.shields.io/maven-metadata/v.svg?label=release&metadataUrl=https%3A%2F%2Frepo1.maven.org%2Fmaven2%2Fcom%2Fautonomousapps%2Fdependency-analysis%2Fcom.autonomousapps.dependency-analysis.gradle.plugin%2Fmaven-metadata.xml[Latest version]
image::https://img.shields.io/nexus/s/com.autonomousapps/dependency-analysis-gradle-plugin?label=snapshot&server=https%3A%2F%2Foss.sonatype.org[Latest snapshot]
image::https://github.com/autonomousapps/dependency-analysis-android-gradle-plugin/workflows/Main/badge.svg[Build status]

== Detect unused and misused dependencies
The Dependency Analysis Gradle Plugin (n√©e Dependency Analysis Android Gradle Plugin) detects the following:

1. Unused dependencies.
2. Used transitive dependencies (which you may want to declare directly).
3. Dependencies declared on the wrong configuration (`api` vs `implementation` vs `compileOnly`, etc.).
4. Unnecessary plugins (currently only `kapt`).

As a side effect, the plugin can also tell you your project's ABI, and produces graphviz files representing various
views of your dependency graph, among other things. These side effects are currently mostly undocumented internal
behaviors, but they may be interesting for some advanced users.

== Add to your project and use
For detailed instructions, see
https://github.com/autonomousapps/dependency-analysis-android-gradle-plugin/wiki/Adding-to-your-project[the wiki]

The simplest approach is to add the following:

.root build.gradle
[source,groovy]
----
plugins {
  id 'com.autonomousapps.dependency-analysis' version "<<latest_version>>"
}
----

For a quick start, just run the following:

----
./gradlew buildHealth
----

=== Basic configuration

For detailed information on how to configure the plugin, see https://github.com/autonomousapps/dependency-analysis-android-gradle-plugin/wiki/Customizing-plugin-behavior[the wiki].

For Groovy DSL, you can configure the extension very simply:

.build.gradle
[source,groovy]
----
dependencyAnalysis {
  // configure goes here
}
----

Or for Kotlin DSL:

.build.gradle.kts
[source,kt]
----
configure<com.autonomousapps.DependencyAnalysisExtension> {
  // configure goes here
}
----


== Two models

At time of writing, there are two distinct models available for conducting dependency analysis. By default, from version
*1.0.0-rc01*, the plugin uses the "new model." With that version, you may switch to the "old model" via the system
property `dependency.analysis.old.model=true`. That is also the _final_ version of the plugin that support use of the
old model. From *1.0.0-rc02*, the old model is no longer available.

== Publications
The following is a list of articles / blog posts that have been published discussing this plugin:

1. https://dev.to/autonomousapps/the-proper-care-and-feeding-of-your-gradle-build-d8g[The proper care and feeding of your Gradle build]
2. https://dev.to/autonomousapps/dependency-analysis-gradle-plugin-using-bytecode-analysis-to-find-unused-dependencies-509n[Dependency Analysis Gradle Plugin: Using bytecode analysis to find unused dependencies]
3. https://dev.to/autonomousapps/dependency-analysis-gradle-plugin-what-s-an-abi-3l2h[Dependency Analysis Gradle Plugin: What's an ABI?]
4. https://dev.to/autonomousapps/reducing-my-gradle-plugin-s-impact-on-configuration-time-a-journey-32h2[Reducing my Gradle plugin's impact on configuration time: A journey]

...with more to come :)

This plugin has also been featured in these newsletters:

1. https://newsletter.gradle.com/2020/09[Gradle, September 2020]
2. https://newsletter.gradle.com/2020/08[Gradle, August 2020]
3. https://androidweekly.net/issues/issue-423[Android Weekly, Issue #423]
4. https://newsletter.gradle.com/2020/07[Gradle, July 2020]
5. https://newsletter.gradle.com/2020/06[Gradle, June 2020]
