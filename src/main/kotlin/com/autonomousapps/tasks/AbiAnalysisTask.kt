@file:Suppress("UnstableApiUsage")

package com.autonomousapps.tasks

import com.autonomousapps.TASK_GROUP_DEP
import com.autonomousapps.internal.AbiExclusions
import com.autonomousapps.internal.kotlin.computeAbi
import com.autonomousapps.internal.utils.filterToSet
import com.autonomousapps.internal.utils.fromJson
import com.autonomousapps.internal.utils.getAndDelete
import com.autonomousapps.internal.utils.toJson
import org.gradle.api.DefaultTask
import org.gradle.api.file.ConfigurableFileCollection
import org.gradle.api.file.RegularFileProperty
import org.gradle.api.provider.Property
import org.gradle.api.tasks.*
import org.gradle.workers.WorkAction
import org.gradle.workers.WorkParameters
import org.gradle.workers.WorkerExecutor
import java.io.File
import javax.inject.Inject

@CacheableTask
abstract class AbiAnalysisTask @Inject constructor(
  private val workerExecutor: WorkerExecutor
) : DefaultTask() {

  init {
    group = TASK_GROUP_DEP
    description = "Produces a report of the ABI of this project"
  }

  /**
   * Mutually exclusive with [javaClasses] and [kotlinClasses].
   */
  @get:Optional
  @get:Classpath
  abstract val jar: RegularFileProperty

  /**
   * Class files generated by Java source. Mutually exclusive with [jar].
   */
  @get:Optional
  @get:Classpath
  @get:InputFiles
  abstract val javaClasses: ConfigurableFileCollection

  /**
   * Class files generated by Kotlin source. Mutually exclusive with [jar].
   */
  @get:Optional
  @get:Classpath
  @get:InputFiles
  abstract val kotlinClasses: ConfigurableFileCollection

  @get:Optional
  @get:Input
  abstract val exclusions: Property<String>

  @get:OutputFile
  abstract val output: RegularFileProperty

  @get:OutputFile
  abstract val abiDump: RegularFileProperty

  @TaskAction
  fun action() {
    workerExecutor.noIsolation().submit(AbiAnalysis2WorkAction::class.java) {
      jar.set(this@AbiAnalysisTask.jar)
      javaClasses.setFrom(this@AbiAnalysisTask.javaClasses)
      kotlinClasses.setFrom(this@AbiAnalysisTask.kotlinClasses)
      exclusions.set(this@AbiAnalysisTask.exclusions)
      output.set(this@AbiAnalysisTask.output)
      abiDump.set(this@AbiAnalysisTask.abiDump)
    }
  }

  interface AbiAnalysis2Parameters : WorkParameters {
    val jar: RegularFileProperty
    val javaClasses: ConfigurableFileCollection
    val kotlinClasses: ConfigurableFileCollection
    val exclusions: Property<String>
    val output: RegularFileProperty
    val abiDump: RegularFileProperty
  }

  abstract class AbiAnalysis2WorkAction : WorkAction<AbiAnalysis2Parameters> {

    override fun execute() {
      val output = parameters.output.getAndDelete()
      val outputAbiDump = parameters.abiDump.getAndDelete()

      val jarFile = parameters.jar.orNull?.asFile
      val classFiles = allClassFiles()
      val exclusions = parameters.exclusions.orNull?.fromJson<AbiExclusions>() ?: AbiExclusions.NONE

      val explodingAbi = if (jarFile != null) {
        computeAbi(jarFile, exclusions, outputAbiDump)
      } else {
        computeAbi(classFiles, exclusions, outputAbiDump)
      }

      output.writeText(explodingAbi.toJson())
    }

    private fun allClassFiles(): Set<File> =
      parameters.javaClasses.asFileTree.files.plus(parameters.kotlinClasses.asFileTree.files)
        .filterToSet { it.path.endsWith(".class") }
  }
}
